{"ast":null,"code":"// src/utils/codeGenerator.js\nexport const generateCode = (classes, relations, language = 'java') => {\n  switch (language.toLowerCase()) {\n    case 'php':\n      return generatePHPCode(classes, relations);\n    case 'java':\n      return generateJavaCode(classes, relations);\n    case 'python':\n      return generatePythonCode(classes, relations);\n    default:\n      return generateJavaCode(classes, relations);\n  }\n};\nconst generateJavaCode = (classes, relations) => {\n  let code = '';\n  classes.forEach(cls => {\n    // Find inheritance relation\n    const inheritance = relations.find(rel => rel.target === cls.id && rel.type === 'generalization');\n\n    // Class declaration with inheritance\n    code += `public class ${cls.name}`;\n    if (inheritance) {\n      const parentClass = classes.find(c => c.id === inheritance.source);\n      if (parentClass) {\n        code += ` extends ${parentClass.name}`;\n      }\n    }\n    code += ' {\\n\\n';\n\n    // Attributes\n    cls.attributes.forEach(attr => {\n      code += `    ${attr.access} ${attr.type} ${attr.name};\\n`;\n    });\n    code += '\\n';\n\n    // Constructor\n    code += `    public ${cls.name}() {\\n    }\\n\\n`;\n\n    // Getters and Setters\n    cls.attributes.forEach(attr => {\n      // Getter\n      code += `    public ${attr.type} get${capitalize(attr.name)}() {\\n`;\n      code += `        return this.${attr.name};\\n`;\n      code += `    }\\n\\n`;\n\n      // Setter\n      code += `    public void set${capitalize(attr.name)}(${attr.type} ${attr.name}) {\\n`;\n      code += `        this.${attr.name} = ${attr.name};\\n`;\n      code += `    }\\n\\n`;\n    });\n\n    // Methods\n    cls.methods.forEach(method => {\n      code += `    ${method.access} ${method.returnType} ${method.name}() {\\n`;\n      code += `        // TODO: Implement method\\n`;\n      code += `    }\\n\\n`;\n    });\n    code += '}\\n\\n';\n  });\n  return code;\n};\nconst generatePHPCode = (classes, relations) => {\n  let code = \"<?php\\n\\n\";\n  classes.forEach(cls => {\n    const inheritance = relations.find(rel => rel.target === cls.id && rel.type === 'generalization');\n    code += `class ${cls.name}`;\n    if (inheritance) {\n      const parentClass = classes.find(c => c.id === inheritance.source);\n      if (parentClass) {\n        code += ` extends ${parentClass.name}`;\n      }\n    }\n    code += ' {\\n\\n';\n\n    // Attributes\n    cls.attributes.forEach(attr => {\n      const visibility = attr.access === 'package' ? 'public' : attr.access;\n      code += `    ${visibility} $${attr.name};\\n`;\n    });\n    code += '\\n';\n\n    // Constructor\n    code += `    public function __construct() {\\n    }\\n\\n`;\n\n    // Getters and Setters\n    cls.attributes.forEach(attr => {\n      // Getter\n      code += `    public function get${capitalize(attr.name)}() {\\n`;\n      code += `        return $this->${attr.name};\\n`;\n      code += `    }\\n\\n`;\n\n      // Setter\n      code += `    public function set${capitalize(attr.name)}($${attr.name}) {\\n`;\n      code += `        $this->${attr.name} = $${attr.name};\\n`;\n      code += `    }\\n\\n`;\n    });\n\n    // Methods\n    cls.methods.forEach(method => {\n      const visibility = method.access === 'package' ? 'public' : method.access;\n      code += `    ${visibility} function ${method.name}() {\\n`;\n      code += `        // TODO: Implement method\\n`;\n      code += `    }\\n\\n`;\n    });\n    code += '}\\n\\n';\n  });\n  return code;\n};\nconst generatePythonCode = (classes, relations) => {\n  let code = '';\n  classes.forEach(cls => {\n    const inheritance = relations.find(rel => rel.target === cls.id && rel.type === 'generalization');\n    code += `class ${cls.name}`;\n    if (inheritance) {\n      const parentClass = classes.find(c => c.id === inheritance.source);\n      if (parentClass) {\n        code += `(${parentClass.name})`;\n      }\n    }\n    code += ':\\n';\n\n    // Constructor with attributes\n    code += '    def __init__(self):\\n';\n    if (cls.attributes.length === 0) {\n      code += '        pass\\n';\n    } else {\n      cls.attributes.forEach(attr => {\n        code += `        self.${attr.name} = None  # ${attr.type}\\n`;\n      });\n    }\n    code += '\\n';\n\n    // Getters and Setters using @property\n    cls.attributes.forEach(attr => {\n      // Getter\n      code += `    @property\\n`;\n      code += `    def ${attr.name}(self):\\n`;\n      code += `        return self._${attr.name}\\n\\n`;\n\n      // Setter\n      code += `    @${attr.name}.setter\\n`;\n      code += `    def ${attr.name}(self, value):\\n`;\n      code += `        self._${attr.name} = value\\n\\n`;\n    });\n\n    // Methods\n    cls.methods.forEach(method => {\n      code += `    def ${method.name}(self):\\n`;\n      code += `        # TODO: Implement method\\n`;\n      code += `        pass\\n\\n`;\n    });\n    code += '\\n';\n  });\n  return code;\n};\nconst capitalize = s => s.charAt(0).toUpperCase() + s.slice(1);","map":{"version":3,"names":["generateCode","classes","relations","language","toLowerCase","generatePHPCode","generateJavaCode","generatePythonCode","code","forEach","cls","inheritance","find","rel","target","id","type","name","parentClass","c","source","attributes","attr","access","capitalize","methods","method","returnType","visibility","length","s","charAt","toUpperCase","slice"],"sources":["C:/Users/IMADEV/Documents/umleditorvf/src/utils/codeGenerator.js"],"sourcesContent":["// src/utils/codeGenerator.js\nexport const generateCode = (classes, relations, language = 'java') => {\n  switch (language.toLowerCase()) {\n    case 'php':\n      return generatePHPCode(classes, relations);\n    case 'java':\n      return generateJavaCode(classes, relations);\n    case 'python':\n      return generatePythonCode(classes, relations);\n    default:\n      return generateJavaCode(classes, relations);\n  }\n};\n\nconst generateJavaCode = (classes, relations) => {\n  let code = '';\n  \n  classes.forEach(cls => {\n    // Find inheritance relation\n    const inheritance = relations.find(\n      rel => rel.target === cls.id && rel.type === 'generalization'\n    );\n    \n    // Class declaration with inheritance\n    code += `public class ${cls.name}`;\n    if (inheritance) {\n      const parentClass = classes.find(c => c.id === inheritance.source);\n      if (parentClass) {\n        code += ` extends ${parentClass.name}`;\n      }\n    }\n    code += ' {\\n\\n';\n\n    // Attributes\n    cls.attributes.forEach(attr => {\n      code += `    ${attr.access} ${attr.type} ${attr.name};\\n`;\n    });\n    code += '\\n';\n\n    // Constructor\n    code += `    public ${cls.name}() {\\n    }\\n\\n`;\n\n    // Getters and Setters\n    cls.attributes.forEach(attr => {\n      // Getter\n      code += `    public ${attr.type} get${capitalize(attr.name)}() {\\n`;\n      code += `        return this.${attr.name};\\n`;\n      code += `    }\\n\\n`;\n\n      // Setter\n      code += `    public void set${capitalize(attr.name)}(${attr.type} ${attr.name}) {\\n`;\n      code += `        this.${attr.name} = ${attr.name};\\n`;\n      code += `    }\\n\\n`;\n    });\n\n    // Methods\n    cls.methods.forEach(method => {\n      code += `    ${method.access} ${method.returnType} ${method.name}() {\\n`;\n      code += `        // TODO: Implement method\\n`;\n      code += `    }\\n\\n`;\n    });\n\n    code += '}\\n\\n';\n  });\n\n  return code;\n};\n\nconst generatePHPCode = (classes, relations) => {\n  let code = \"<?php\\n\\n\";\n  \n  classes.forEach(cls => {\n    const inheritance = relations.find(\n      rel => rel.target === cls.id && rel.type === 'generalization'\n    );\n    \n    code += `class ${cls.name}`;\n    if (inheritance) {\n      const parentClass = classes.find(c => c.id === inheritance.source);\n      if (parentClass) {\n        code += ` extends ${parentClass.name}`;\n      }\n    }\n    code += ' {\\n\\n';\n\n    // Attributes\n    cls.attributes.forEach(attr => {\n      const visibility = attr.access === 'package' ? 'public' : attr.access;\n      code += `    ${visibility} $${attr.name};\\n`;\n    });\n    code += '\\n';\n\n    // Constructor\n    code += `    public function __construct() {\\n    }\\n\\n`;\n\n    // Getters and Setters\n    cls.attributes.forEach(attr => {\n      // Getter\n      code += `    public function get${capitalize(attr.name)}() {\\n`;\n      code += `        return $this->${attr.name};\\n`;\n      code += `    }\\n\\n`;\n\n      // Setter\n      code += `    public function set${capitalize(attr.name)}($${attr.name}) {\\n`;\n      code += `        $this->${attr.name} = $${attr.name};\\n`;\n      code += `    }\\n\\n`;\n    });\n\n    // Methods\n    cls.methods.forEach(method => {\n      const visibility = method.access === 'package' ? 'public' : method.access;\n      code += `    ${visibility} function ${method.name}() {\\n`;\n      code += `        // TODO: Implement method\\n`;\n      code += `    }\\n\\n`;\n    });\n\n    code += '}\\n\\n';\n  });\n\n  return code;\n};\n\nconst generatePythonCode = (classes, relations) => {\n  let code = '';\n  \n  classes.forEach(cls => {\n    const inheritance = relations.find(\n      rel => rel.target === cls.id && rel.type === 'generalization'\n    );\n    \n    code += `class ${cls.name}`;\n    if (inheritance) {\n      const parentClass = classes.find(c => c.id === inheritance.source);\n      if (parentClass) {\n        code += `(${parentClass.name})`;\n      }\n    }\n    code += ':\\n';\n\n    // Constructor with attributes\n    code += '    def __init__(self):\\n';\n    if (cls.attributes.length === 0) {\n      code += '        pass\\n';\n    } else {\n      cls.attributes.forEach(attr => {\n        code += `        self.${attr.name} = None  # ${attr.type}\\n`;\n      });\n    }\n    code += '\\n';\n\n    // Getters and Setters using @property\n    cls.attributes.forEach(attr => {\n      // Getter\n      code += `    @property\\n`;\n      code += `    def ${attr.name}(self):\\n`;\n      code += `        return self._${attr.name}\\n\\n`;\n\n      // Setter\n      code += `    @${attr.name}.setter\\n`;\n      code += `    def ${attr.name}(self, value):\\n`;\n      code += `        self._${attr.name} = value\\n\\n`;\n    });\n\n    // Methods\n    cls.methods.forEach(method => {\n      code += `    def ${method.name}(self):\\n`;\n      code += `        # TODO: Implement method\\n`;\n      code += `        pass\\n\\n`;\n    });\n\n    code += '\\n';\n  });\n\n  return code;\n};\n\nconst capitalize = (s) => s.charAt(0).toUpperCase() + s.slice(1);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}